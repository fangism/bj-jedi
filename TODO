TODO list:

compute 5-card, 6-card charlie variations
	to calculate accurately, state must also encode length of hand

crazy variation:
	re-double: double-after-double
		when to do this? A-x vs. 6
			payoff?

standard analysis:
	add variance analysis

analyze Blackjack Switch
	when to switch (tables)

BUGS: (run out of cards?)
Dealer plays...
deck_state.cc:120: failed assertion `cards[r]'
Abort
	I think this happens when drawing randomly
	from the deck when a hole card has been reserved, but not counted.
	We need to adjust for the removed hole-card so that it is not 
	removed twice by accident.  Thus there are hidden odds.
	Now fixed:  Random selection happens accounting for the 
	removed hole card.

analysis:
impact of using a fixed (basic) strategy in different count situations
	imperfections of strategies (betting correlation)
instead of infinite deck, compute finite deck edges (without replacement)
	could do on-demand exact calculation as each situation
	comes up, instead of for every dealer reveal card, 
	and every player hand.  
Exact odds per situation could be computed using recursion/probability.
	Recursion could also be limited based on cumulative probability
		falling below tolerance (e.g. 1e-4).
	Computing this is taxing --
		probability-annotated decision/outcome tree.

post-peek probability (Bayes' Formula):
	after checking dealer hole card, there is knowledge about
	the hole card, and thus the odds of drawing from the 
	remaining deck should be appropriately adjusted.
	Each card remaining in deck has an increased likelihood
	of drawing the card that is ruled out by peeking.
	Say there are 13 cards remaining, one of each card, 
	and one is chosen aside to be the hole card,
	and it is known that the hole card is NOT a T,J,Q,K.
	Before peeking, the odds of drawing a 10 next was 4/13.
	After peeking for 10, there is an equal probability of any non-10 
	card being the hole card: 1/(13-4) = 1/9.  (Generally, N_k/(N-N_10))
	The probability of drawing an A (or any non-10 card) next is:
	8/9 * 1/12 +1/9 * 0/12 = 2/27.
	1/12 comes from 1/(N-1).
	The post-peek probability of drawing a 10 next is:
	N_10/(N-1) = 4/12 = 1/3.
	The sum probability = 9 *2/27 +1/3 = 2/3 +1/3 = 1
	Generalized, the post-peek-10 probability of drawing a card k (not 10):
	p(hole=k) *p(next=k|hole=k) +p(hole!=k) *p(next=k|hole!=k)
	N_k/(N-N_10) * (N_k-1)/(N-1) + (N-N_10-N_k)/(N-N_10) *N_k/(N-1) =
	(N_k^2 -N_k + N*N_k -N_k^2 -N_k*N_10)/(N-1)(N-N_10) =
	(N -N_10 -1)*N_k/(N-1)(N-N_10)

	Generalize and write-up in text document.

permissible actions table (action_masks):
	different variations may restrict player options for certain hands,
		such as double-on-10,11-only, 
		allow surrender against 10,A only.
	Maintain two tables to represent such restrictions,
		and for calculations, take the initial permissible actions
		as the intersection (bitwise-AND) of the two action masks.
	This will not cover everything.  Splits are considered separately.

even-money offer on 6:5 blackjack?
	rare, but if offered, should *always* be taken

side-bet analysis:
	seen in the wild: 6-7-8, paired hand bonus, straight, 
		flush, 3-of-a-kind.
	Typically, never favorable to play these side bets, 
		but with counting, may actually become favorable!

card randomization:
alternatively, std::shuffle entire sequence up front
	this avoids repeated call to RNG,
	but makes it difficult to edit the deck.

simulator/analyzer:
I/O: option to read raw character w/o hitting return (ncurses UI)
logging
track statistics
preset options for rules
save/restore state/accounts
define/use API for hooking up custom strategies
define/use API for hooking up different UIs (stdio, ncurses)
	factor out current (CLI) interface into libbj-cli
add robot players: play styles [perfect, basic, near-perfect, n00b]
option for infinite deck (replace every card)
	almost the same as continuous shuffle

options:
show overall edge given exact count (accumulate)
support different counting schemes besides hi-lo
silent auto-play option for simulations (speed)
betting: auto-change bet amount according to conditions
	based on true count or true edge.
	set betting granularity.

struct history {
to track every situation and decision?
situations to review? bookmark as a player-choice option
auto-save "wrong" decisions
	replay bookmark situations
	bookmark insurance queries
	quantify how wrong is wrong using edges, score
	command: bookmarks-explain, show all solutions
}

commands:
play-option::TMI: too much information
compare basic vs. dynamic strategy
auto-play-until-count (falls below, based on true-count)

command-line options:
paths to search for config/save/load files?

test cases:
using basic vs. dynamic strategy
sensitivity analysis of dynamic strategy and edges
	also repeat sensitivity analysis for using only basic-strategy

library:
	export interfaces to: python, octave, guile, etc...
	using swig
	needs well-defined API

paper:
write an academic paper on results
	second-order covariant sensitivity analysis
	discuss betting strategies, Kelly criterion
betting correlation (efficiency of counting systems)
graphics: pretty 3D surface plots
	slider animations
HTML?
